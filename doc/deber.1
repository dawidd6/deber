.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "DEBER" "1" "May 2019" "" ""
.
.SH "NAME"
\fBdeber\fR \- Debian packaging with Docker
.
.SH "SYNOPSIS"
\fBdeber\fR [flags]
.
.SH "DESCRIPTION"
Utility made with simplicity in mind to provide an easy way for building Debian packages in Docker containers\.
.
.P
Only one option is respected, it is pointless to specify multiple options at once\.
.
.SH "OPTIONS"
.
.TP
\fB\-i\fR, \fB\-\-include\fR \fIstring\fR
steps which will be executed as the only ones
.
.TP
\fB\-e\fR, \fB\-\-exclude\fR \fIstring\fR
steps which should be omitted
.
.TP
\fB\-s\fR, \fB\-\-shell\fR
run bash shell interactively in container
.
.TP
\fB\-r\fR, \fB\-\-remove\fR
alias for \'\-\-include remove,stop\'
.
.TP
\fB\-l\fR, \fB\-\-list\fR
list steps in order and exit
.
.TP
\fB\-\-version\fR
version for deber
.
.TP
\fB\-h\fR, \fB\-\-help\fR
help for deber
.
.SH "STEPS"
The following steps are executed (in that exact order):
.
.P
\fB1\. check\fR
.
.IP "" 4
.
.nf

    Checks if to\-be\-built package is already built and in archive\.
    If package is in archive, then deber will simply exit\.
    To build package anyway, simply exclude this step\.
.
.fi
.
.IP "" 0
.
.P
\fB2\. build\fR
.
.IP "" 4
.
.nf

    Builds image for deber\'s use\.
    This step is skipped if an image is already built\.
    Image\'s parent name is derived from Debian\'s changelog, for example
    if in `debian/changelog` target distribution is `bionic`, then
    deber will use `ubuntu:bionic` image as a parent from Docker Hub\.
    Image\'s repository name is determined by querying Docker Hub API\.
    So, if one wants to build for other distribution than specified in
    `debian/changelog`, just change target distribution to whatever
    one desires and deber will follow\.
    Also if image is older than 14 days, deber will try to rebuild it\.
.
.fi
.
.IP "" 0
.
.P
\fB3\. create\fR
.
.IP "" 4
.
.nf

    Creates container and makes needed directories on host system\.
    Will fail if image is nonexistent\.
.
.fi
.
.IP "" 0
.
.P
\fB4\. start\fR
.
.IP "" 4
.
.nf

    Starts previously created container\.
    The entry command is `sleep inf`, which means that container
    will just sit there, doing nothing and waiting for commands\.
.
.fi
.
.IP "" 0
.
.P
\fB5\. tarball\fR
.
.IP "" 4
.
.nf

    Moves orig upstream tarball from parent directory to build directory\.
    Will fail if tarball is nonexistent and skip if package is native\.
.
.fi
.
.IP "" 0
.
.P
\fB6\. update\fR
.
.IP "" 4
.
.nf

    Updates apt\'s cache\.
    Also creates empty `Packages` file in archive if nonexistent
.
.fi
.
.IP "" 0
.
.P
\fB7\. deps\fR
.
.IP "" 4
.
.nf

    Installs package\'s build dependencies in container\.
    Runs `mk\-build\-deps` with appropriate options\.
.
.fi
.
.IP "" 0
.
.P
\fB8\. package\fR
.
.IP "" 4
.
.nf

    Runs `dpkg\-buildpackage` in container\.
    Options passed to `dpkg\-buildpackage` are taken from environment variable
.
.fi
.
.IP "" 0
.
.P
\fB9\. test\fR
.
.IP "" 4
.
.nf

    Runs series of commands in container:
      \- debc
      \- debi
      \- lintian
    Options passed to `lintian` are taken from environment variable
.
.fi
.
.IP "" 0
.
.P
\fB10\. archive\fR
.
.IP "" 4
.
.nf

    Moves built package artifacts (like \.deb, \.dsc and others) to archive\.
    Package directory in archive is overwritten every time\.
.
.fi
.
.IP "" 0
.
.P
\fB11\. scan\fR
.
.IP "" 4
.
.nf

    Scans available packages in archive and writes result to `Packages` file\.
    This `Packages` file is then used by apt in container\.
.
.fi
.
.IP "" 0
.
.P
\fB12\. stop\fR
.
.IP "" 4
.
.nf

    Stops container\.
    With 10ms timeout\.
.
.fi
.
.IP "" 0
.
.P
\fB13\. remove\fR
.
.IP "" 4
.
.nf

    Removes container\.
    Nothing more\.
.
.fi
.
.IP "" 0
.
.SH "EXAMPLES"
Basic usage of deber with gbp:
.
.IP "" 4
.
.nf

$ gbp buildpackage \-\-git\-builder deber
.
.fi
.
.IP "" 0
.
.P
Excluding some steps:
.
.IP "" 4
.
.nf

$ deber \-\-exclude remove,stop,archive
.
.fi
.
.IP "" 0
.
.P
Removing container after unsuccessful build (if needed):
.
.IP "" 4
.
.nf

$ deber \-\-include remove,stop
.
.fi
.
.IP "" 0
.
.P
Only building image:
.
.IP "" 4
.
.nf

$ deber \-\-include build
.
.fi
.
.IP "" 0
.
.P
Only moving tarball and creating container:
.
.P
Note: this example assumes that you specified \fBbuilder = deber\fR in \fBgbp\.conf\fR\.
.
.IP "" 4
.
.nf

$ gbp buildpackage \-\-include tarball,create
.
.fi
.
.IP "" 0
.
.P
Build package regardless it\'s existence in archive:
.
.IP "" 4
.
.nf

$ deber \-\-exclude check
.
.fi
.
.IP "" 0
.
.P
Build package without checking archive, updating apt\'s cache and scanning packages:
.
.IP "" 4
.
.nf

$ deber \-\-exclude check,update,scan
.
.fi
.
.IP "" 0
.
.P
Launch interactive bash shell session in container:
.
.P
Note: specifying other options after or before this, takes no effect\.
.
.IP "" 4
.
.nf

$ deber \-\-shell
.
.fi
.
.IP "" 0
.
.SH "ENVIRONMENT VARIABLES"
\fBDEBER_ARCHIVE\fR
.
.IP "" 4
.
.nf

Directory where deber will put built packages\.
Defaults to "$HOME/deber"\.
.
.fi
.
.IP "" 0
.
.P
\fBDEBER_DPKG_BUILDPACKAGE_FLAGS\fR
.
.IP "" 4
.
.nf

Space separated flags to be passed to dpkg\-buildpackage in container\.
.
.fi
.
.IP "" 0
.
.P
\fBDEBER_LINTIAN_FLAGS\fR
.
.IP "" 4
.
.nf

Space separated flags to be passed to lintian in container\.
.
.fi
.
.IP "" 0
.
.P
\fBDEBER_LOG_COLOR\fR
.
.IP "" 4
.
.nf

Set to "no", "false" or "off" to disable log coloring\.
.
.fi
.
.IP "" 0
.
.SH "SEE ALSO"
gbp(1), gbp\.conf(5), gbp\-buildpackage(1), dpkg\-buildpackage(1), lintian(1), debc(1), debi(1), mk\-build\-deps(1)
