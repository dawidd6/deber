.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "DEBER" "1" "April 2019" "" ""
.
.SH "NAME"
\fBdeber\fR \- Debian packaging with Docker
.
.SH "SYNOPSIS"
\fBdeber\fR [flags]
.
.SH "DESCRIPTION"
Utility made with simplicity in mind to provide an easy way for building Debian packages in Docker containers\.
.
.SH "OPTIONS"
.
.TP
\fB\-i\fR, \fB\-\-include\fR \fIstring\fR
steps which will be executed as the only ones
.
.TP
\fB\-e\fR, \fB\-\-exclude\fR \fIstring\fR
steps which should be omitted
.
.TP
\fB\-\-version\fR
version for deber
.
.TP
\fB\-h\fR, \fB\-\-help\fR
help for deber
.
.SH "STEPS"
The following steps are executed (in that exact order):
.
.P
\fBcheck\fR
.
.IP "" 4
.
.nf

Check if to\-be\-build package is already built and in archive\.

Note: if package is in archive, then deber will simply exit\.
.
.fi
.
.IP "" 0
.
.P
\fBbuild\fR
.
.IP "" 4
.
.nf

Build image\. This step is skipped if an image is already built\.

Also if image is older than 14 days, then deber will try to rebuild it\.
.
.fi
.
.IP "" 0
.
.P
\fBcreate\fR
.
.IP "" 4
.
.nf

Create container and make needed directories on host system\.
.
.fi
.
.IP "" 0
.
.P
\fBstart\fR
.
.IP "" 4
.
.nf

Start container\.
.
.fi
.
.IP "" 0
.
.P
\fBtarball\fR
.
.IP "" 4
.
.nf

Move orig upstream tarball from parent directory to build directory\.
.
.fi
.
.IP "" 0
.
.P
\fBupdate\fR
.
.IP "" 4
.
.nf

Update apt\'s cache\.
.
.fi
.
.IP "" 0
.
.P
\fBdeps\fR
.
.IP "" 4
.
.nf

Install package\'s build dependencies in container
.
.fi
.
.IP "" 0
.
.P
\fBpackage\fR
.
.IP "" 4
.
.nf

Run `dpkg\-buildpackage` in container\.
.
.fi
.
.IP "" 0
.
.P
\fBtest\fR
.
.IP "" 4
.
.nf

Run series of commands in Docker container:
   \- debc
   \- debi
   \- lintian
.
.fi
.
.IP "" 0
.
.P
\fBarchive\fR
.
.IP "" 4
.
.nf

Move built package artifacts to archive\.

Note: this step is skipped if package directory already exists in archive
.
.fi
.
.IP "" 0
.
.P
\fBscan\fR
.
.IP "" 4
.
.nf

Scan packages in archive\.
.
.fi
.
.IP "" 0
.
.P
\fBstop\fR
.
.IP "" 4
.
.nf

Stop container\.
.
.fi
.
.IP "" 0
.
.P
\fBremove\fR
.
.IP "" 4
.
.nf

Remove container\.
.
.fi
.
.IP "" 0
.
.SH "EXAMPLES"
Basic usage of deber with gbp:
.
.IP "" 4
.
.nf

$ gbp buildpackage \-\-git\-builder deber
.
.fi
.
.IP "" 0
.
.P
Excluding some steps:
.
.IP "" 4
.
.nf

$ deber \-\-exclude remove,stop,archive
.
.fi
.
.IP "" 0
.
.P
Removing container after unsuccessful build (if needed):
.
.IP "" 4
.
.nf

$ deber \-\-include remove,stop
.
.fi
.
.IP "" 0
.
.P
Only building image:
.
.IP "" 4
.
.nf

$ deber \-\-include build
.
.fi
.
.IP "" 0
.
.P
Only moving tarball and creating container:
.
.P
Note: this example assumes that you specified \fBbuilder = deber\fR in \fBgbp\.conf\fR\.
.
.IP "" 4
.
.nf

$ gbp buildpackage \-\-include tarball,create
.
.fi
.
.IP "" 0
.
.SH "ENVIRONMENT VARIABLES"
\fBDEBER_ARCHIVE\fR
.
.IP "" 4
.
.nf

Directory where deber will put built packages\.
.
.fi
.
.IP "" 0
.
.P
\fBDEBER_DPKG_BUILDPACKAGE_FLAGS\fR
.
.IP "" 4
.
.nf

Space separated flags to be passed to dpkg\-buildpackage in container\.
.
.fi
.
.IP "" 0
.
.P
\fBDEBER_LINTIAN_FLAGS\fR
.
.IP "" 4
.
.nf

Space separated flags to be passed to lintian in container\.
.
.fi
.
.IP "" 0
.
.SH "SEE ALSO"
gbp(1), gbp\.conf(5), gbp\-buildpackage(1), lintian(1)
